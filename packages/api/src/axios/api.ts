/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface APIResponseAuthenticationResponse
 */
export interface APIResponseAuthenticationResponse {
    /**
     * 
     * @type {boolean}
     * @memberof APIResponseAuthenticationResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof APIResponseAuthenticationResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof APIResponseAuthenticationResponse
     */
    'message'?: string;
    /**
     * 
     * @type {AuthenticationResponse}
     * @memberof APIResponseAuthenticationResponse
     */
    'data'?: AuthenticationResponse;
}
/**
 * 
 * @export
 * @interface APIResponseBillboardDTO
 */
export interface APIResponseBillboardDTO {
    /**
     * 
     * @type {boolean}
     * @memberof APIResponseBillboardDTO
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof APIResponseBillboardDTO
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof APIResponseBillboardDTO
     */
    'message'?: string;
    /**
     * 
     * @type {BillboardDTO}
     * @memberof APIResponseBillboardDTO
     */
    'data'?: BillboardDTO;
}
/**
 * 
 * @export
 * @interface APIResponseBoolean
 */
export interface APIResponseBoolean {
    /**
     * 
     * @type {boolean}
     * @memberof APIResponseBoolean
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof APIResponseBoolean
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof APIResponseBoolean
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof APIResponseBoolean
     */
    'data'?: boolean;
}
/**
 * 
 * @export
 * @interface APIResponseListBillboardDTO
 */
export interface APIResponseListBillboardDTO {
    /**
     * 
     * @type {boolean}
     * @memberof APIResponseListBillboardDTO
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof APIResponseListBillboardDTO
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof APIResponseListBillboardDTO
     */
    'message'?: string;
    /**
     * 
     * @type {Array<BillboardDTO>}
     * @memberof APIResponseListBillboardDTO
     */
    'data'?: Array<BillboardDTO>;
}
/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Address
     */
    'deleted'?: boolean;
}
/**
 * 
 * @export
 * @interface AuthenticationResponse
 */
export interface AuthenticationResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationResponse
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface BillboardCreateRequest
 */
export interface BillboardCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof BillboardCreateRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BillboardCreateRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof BillboardCreateRequest
     */
    'type': BillboardCreateRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BillboardCreateRequest
     */
    'location': BillboardCreateRequestLocationEnum;
    /**
     * 
     * @type {Address}
     * @memberof BillboardCreateRequest
     */
    'address'?: Address;
    /**
     * 
     * @type {string}
     * @memberof BillboardCreateRequest
     */
    'material': BillboardCreateRequestMaterialEnum;
    /**
     * 
     * @type {string}
     * @memberof BillboardCreateRequest
     */
    'lighting': BillboardCreateRequestLightingEnum;
    /**
     * 
     * @type {string}
     * @memberof BillboardCreateRequest
     */
    'dimension': BillboardCreateRequestDimensionEnum;
    /**
     * 
     * @type {string}
     * @memberof BillboardCreateRequest
     */
    'mediaDimension': BillboardCreateRequestMediaDimensionEnum;
    /**
     * 
     * @type {number}
     * @memberof BillboardCreateRequest
     */
    'price': number;
    /**
     * 
     * @type {boolean}
     * @memberof BillboardCreateRequest
     */
    'isOpenForBooking': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BillboardCreateRequest
     */
    'isRefundable': boolean;
    /**
     * 
     * @type {number}
     * @memberof BillboardCreateRequest
     */
    'minimumBookingDays': number;
    /**
     * 
     * @type {number}
     * @memberof BillboardCreateRequest
     */
    'minimumDaysToCancel': number;
}

export const BillboardCreateRequestTypeEnum = {
    Digital: 'DIGITAL',
    Standard: 'STANDARD'
} as const;

export type BillboardCreateRequestTypeEnum = typeof BillboardCreateRequestTypeEnum[keyof typeof BillboardCreateRequestTypeEnum];
export const BillboardCreateRequestLocationEnum = {
    Latitude: 'LATITUDE',
    Longitude: 'LONGITUDE'
} as const;

export type BillboardCreateRequestLocationEnum = typeof BillboardCreateRequestLocationEnum[keyof typeof BillboardCreateRequestLocationEnum];
export const BillboardCreateRequestMaterialEnum = {
    Canvas: 'CANVAS',
    Vinyl: 'VINYL'
} as const;

export type BillboardCreateRequestMaterialEnum = typeof BillboardCreateRequestMaterialEnum[keyof typeof BillboardCreateRequestMaterialEnum];
export const BillboardCreateRequestLightingEnum = {
    Backlit: 'BACKLIT',
    Frontlit: 'FRONTLIT',
    Spotlight: 'SPOTLIGHT'
} as const;

export type BillboardCreateRequestLightingEnum = typeof BillboardCreateRequestLightingEnum[keyof typeof BillboardCreateRequestLightingEnum];
export const BillboardCreateRequestDimensionEnum = {
    Width: 'WIDTH',
    Height: 'HEIGHT'
} as const;

export type BillboardCreateRequestDimensionEnum = typeof BillboardCreateRequestDimensionEnum[keyof typeof BillboardCreateRequestDimensionEnum];
export const BillboardCreateRequestMediaDimensionEnum = {
    Width: 'WIDTH',
    Height: 'HEIGHT'
} as const;

export type BillboardCreateRequestMediaDimensionEnum = typeof BillboardCreateRequestMediaDimensionEnum[keyof typeof BillboardCreateRequestMediaDimensionEnum];

/**
 * 
 * @export
 * @interface BillboardDTO
 */
export interface BillboardDTO {
    /**
     * 
     * @type {string}
     * @memberof BillboardDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BillboardDTO
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof BillboardDTO
     */
    'updatedAt': string;
    /**
     * 
     * @type {boolean}
     * @memberof BillboardDTO
     */
    'deleted': boolean;
    /**
     * 
     * @type {string}
     * @memberof BillboardDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BillboardDTO
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof BillboardDTO
     */
    'type': BillboardDTOTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BillboardDTO
     */
    'location': BillboardDTOLocationEnum;
    /**
     * 
     * @type {Address}
     * @memberof BillboardDTO
     */
    'address'?: Address;
    /**
     * 
     * @type {string}
     * @memberof BillboardDTO
     */
    'material': BillboardDTOMaterialEnum;
    /**
     * 
     * @type {string}
     * @memberof BillboardDTO
     */
    'lighting': BillboardDTOLightingEnum;
    /**
     * 
     * @type {string}
     * @memberof BillboardDTO
     */
    'dimension': BillboardDTODimensionEnum;
    /**
     * 
     * @type {string}
     * @memberof BillboardDTO
     */
    'mediaDimension': BillboardDTOMediaDimensionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof BillboardDTO
     */
    'images'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BillboardDTO
     */
    'videos'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof BillboardDTO
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof BillboardDTO
     */
    'organizationId': string;
    /**
     * 
     * @type {boolean}
     * @memberof BillboardDTO
     */
    'isOpenForBooking': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BillboardDTO
     */
    'isRefundable': boolean;
    /**
     * 
     * @type {number}
     * @memberof BillboardDTO
     */
    'minimumBookingDays': number;
    /**
     * 
     * @type {number}
     * @memberof BillboardDTO
     */
    'minimumDaysToCancel': number;
}

export const BillboardDTOTypeEnum = {
    Digital: 'DIGITAL',
    Standard: 'STANDARD'
} as const;

export type BillboardDTOTypeEnum = typeof BillboardDTOTypeEnum[keyof typeof BillboardDTOTypeEnum];
export const BillboardDTOLocationEnum = {
    Latitude: 'LATITUDE',
    Longitude: 'LONGITUDE'
} as const;

export type BillboardDTOLocationEnum = typeof BillboardDTOLocationEnum[keyof typeof BillboardDTOLocationEnum];
export const BillboardDTOMaterialEnum = {
    Canvas: 'CANVAS',
    Vinyl: 'VINYL'
} as const;

export type BillboardDTOMaterialEnum = typeof BillboardDTOMaterialEnum[keyof typeof BillboardDTOMaterialEnum];
export const BillboardDTOLightingEnum = {
    Backlit: 'BACKLIT',
    Frontlit: 'FRONTLIT',
    Spotlight: 'SPOTLIGHT'
} as const;

export type BillboardDTOLightingEnum = typeof BillboardDTOLightingEnum[keyof typeof BillboardDTOLightingEnum];
export const BillboardDTODimensionEnum = {
    Width: 'WIDTH',
    Height: 'HEIGHT'
} as const;

export type BillboardDTODimensionEnum = typeof BillboardDTODimensionEnum[keyof typeof BillboardDTODimensionEnum];
export const BillboardDTOMediaDimensionEnum = {
    Width: 'WIDTH',
    Height: 'HEIGHT'
} as const;

export type BillboardDTOMediaDimensionEnum = typeof BillboardDTOMediaDimensionEnum[keyof typeof BillboardDTOMediaDimensionEnum];

/**
 * 
 * @export
 * @interface BillboardUpdateRequest
 */
export interface BillboardUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof BillboardUpdateRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BillboardUpdateRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof BillboardUpdateRequest
     */
    'type': BillboardUpdateRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BillboardUpdateRequest
     */
    'location': BillboardUpdateRequestLocationEnum;
    /**
     * 
     * @type {Address}
     * @memberof BillboardUpdateRequest
     */
    'address'?: Address;
    /**
     * 
     * @type {string}
     * @memberof BillboardUpdateRequest
     */
    'material': BillboardUpdateRequestMaterialEnum;
    /**
     * 
     * @type {string}
     * @memberof BillboardUpdateRequest
     */
    'lighting': BillboardUpdateRequestLightingEnum;
    /**
     * 
     * @type {string}
     * @memberof BillboardUpdateRequest
     */
    'dimension': BillboardUpdateRequestDimensionEnum;
    /**
     * 
     * @type {string}
     * @memberof BillboardUpdateRequest
     */
    'mediaDimension': BillboardUpdateRequestMediaDimensionEnum;
    /**
     * 
     * @type {number}
     * @memberof BillboardUpdateRequest
     */
    'price': number;
    /**
     * 
     * @type {boolean}
     * @memberof BillboardUpdateRequest
     */
    'isOpenForBooking': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BillboardUpdateRequest
     */
    'isRefundable': boolean;
    /**
     * 
     * @type {number}
     * @memberof BillboardUpdateRequest
     */
    'minimumBookingDays': number;
    /**
     * 
     * @type {number}
     * @memberof BillboardUpdateRequest
     */
    'minimumDaysToCancel': number;
}

export const BillboardUpdateRequestTypeEnum = {
    Digital: 'DIGITAL',
    Standard: 'STANDARD'
} as const;

export type BillboardUpdateRequestTypeEnum = typeof BillboardUpdateRequestTypeEnum[keyof typeof BillboardUpdateRequestTypeEnum];
export const BillboardUpdateRequestLocationEnum = {
    Latitude: 'LATITUDE',
    Longitude: 'LONGITUDE'
} as const;

export type BillboardUpdateRequestLocationEnum = typeof BillboardUpdateRequestLocationEnum[keyof typeof BillboardUpdateRequestLocationEnum];
export const BillboardUpdateRequestMaterialEnum = {
    Canvas: 'CANVAS',
    Vinyl: 'VINYL'
} as const;

export type BillboardUpdateRequestMaterialEnum = typeof BillboardUpdateRequestMaterialEnum[keyof typeof BillboardUpdateRequestMaterialEnum];
export const BillboardUpdateRequestLightingEnum = {
    Backlit: 'BACKLIT',
    Frontlit: 'FRONTLIT',
    Spotlight: 'SPOTLIGHT'
} as const;

export type BillboardUpdateRequestLightingEnum = typeof BillboardUpdateRequestLightingEnum[keyof typeof BillboardUpdateRequestLightingEnum];
export const BillboardUpdateRequestDimensionEnum = {
    Width: 'WIDTH',
    Height: 'HEIGHT'
} as const;

export type BillboardUpdateRequestDimensionEnum = typeof BillboardUpdateRequestDimensionEnum[keyof typeof BillboardUpdateRequestDimensionEnum];
export const BillboardUpdateRequestMediaDimensionEnum = {
    Width: 'WIDTH',
    Height: 'HEIGHT'
} as const;

export type BillboardUpdateRequestMediaDimensionEnum = typeof BillboardUpdateRequestMediaDimensionEnum[keyof typeof BillboardUpdateRequestMediaDimensionEnum];

/**
 * 
 * @export
 * @interface CreateOrganizationRequest
 */
export interface CreateOrganizationRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    'organizationName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserAuthenticationRequest
 */
export interface UserAuthenticationRequest {
    /**
     * 
     * @type {string}
     * @memberof UserAuthenticationRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserAuthenticationRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserRegistrationRequest
 */
export interface UserRegistrationRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationRequest
     */
    'password'?: string;
}

/**
 * AuthenticationControllerApi - axios parameter creator
 * @export
 */
export const AuthenticationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserAuthenticationRequest} userAuthenticationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate: async (userAuthenticationRequest: UserAuthenticationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAuthenticationRequest' is not null or undefined
            assertParamExists('authenticate', 'userAuthenticationRequest', userAuthenticationRequest)
            const localVarPath = `/api/v1/auth/user/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAuthenticationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserAuthenticationRequest} userAuthenticationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateOrganizationUser: async (userAuthenticationRequest: UserAuthenticationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAuthenticationRequest' is not null or undefined
            assertParamExists('authenticateOrganizationUser', 'userAuthenticationRequest', userAuthenticationRequest)
            const localVarPath = `/api/v1/auth/organization/user/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAuthenticationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationControllerApi - functional programming interface
 * @export
 */
export const AuthenticationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserAuthenticationRequest} userAuthenticationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticate(userAuthenticationRequest: UserAuthenticationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIResponseAuthenticationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticate(userAuthenticationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationControllerApi.authenticate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserAuthenticationRequest} userAuthenticationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticateOrganizationUser(userAuthenticationRequest: UserAuthenticationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIResponseAuthenticationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateOrganizationUser(userAuthenticationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationControllerApi.authenticateOrganizationUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationControllerApi - factory interface
 * @export
 */
export const AuthenticationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {UserAuthenticationRequest} userAuthenticationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate(userAuthenticationRequest: UserAuthenticationRequest, options?: RawAxiosRequestConfig): AxiosPromise<APIResponseAuthenticationResponse> {
            return localVarFp.authenticate(userAuthenticationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserAuthenticationRequest} userAuthenticationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateOrganizationUser(userAuthenticationRequest: UserAuthenticationRequest, options?: RawAxiosRequestConfig): AxiosPromise<APIResponseAuthenticationResponse> {
            return localVarFp.authenticateOrganizationUser(userAuthenticationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationControllerApi - object-oriented interface
 * @export
 * @class AuthenticationControllerApi
 * @extends {BaseAPI}
 */
export class AuthenticationControllerApi extends BaseAPI {
    /**
     * 
     * @param {UserAuthenticationRequest} userAuthenticationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationControllerApi
     */
    public authenticate(userAuthenticationRequest: UserAuthenticationRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationControllerApiFp(this.configuration).authenticate(userAuthenticationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserAuthenticationRequest} userAuthenticationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationControllerApi
     */
    public authenticateOrganizationUser(userAuthenticationRequest: UserAuthenticationRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationControllerApiFp(this.configuration).authenticateOrganizationUser(userAuthenticationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BillboardControllerApi - axios parameter creator
 * @export
 */
export const BillboardControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BillboardCreateRequest} billboardCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBillboard: async (billboardCreateRequest: BillboardCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'billboardCreateRequest' is not null or undefined
            assertParamExists('createBillboard', 'billboardCreateRequest', billboardCreateRequest)
            const localVarPath = `/api/v1/billboards/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(billboardCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBillboards: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/billboards/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillboardById: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/billboards/:id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BillboardUpdateRequest} billboardUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBillboard: async (billboardUpdateRequest: BillboardUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'billboardUpdateRequest' is not null or undefined
            assertParamExists('updateBillboard', 'billboardUpdateRequest', billboardUpdateRequest)
            const localVarPath = `/api/v1/billboards/:id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(billboardUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillboardControllerApi - functional programming interface
 * @export
 */
export const BillboardControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BillboardControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BillboardCreateRequest} billboardCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBillboard(billboardCreateRequest: BillboardCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIResponseBillboardDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBillboard(billboardCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillboardControllerApi.createBillboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBillboards(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIResponseListBillboardDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBillboards(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillboardControllerApi.getAllBillboards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBillboardById(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIResponseBillboardDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBillboardById(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillboardControllerApi.getBillboardById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BillboardUpdateRequest} billboardUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBillboard(billboardUpdateRequest: BillboardUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIResponseBillboardDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBillboard(billboardUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BillboardControllerApi.updateBillboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BillboardControllerApi - factory interface
 * @export
 */
export const BillboardControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BillboardControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {BillboardCreateRequest} billboardCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBillboard(billboardCreateRequest: BillboardCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<APIResponseBillboardDTO> {
            return localVarFp.createBillboard(billboardCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBillboards(options?: RawAxiosRequestConfig): AxiosPromise<APIResponseListBillboardDTO> {
            return localVarFp.getAllBillboards(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillboardById(options?: RawAxiosRequestConfig): AxiosPromise<APIResponseBillboardDTO> {
            return localVarFp.getBillboardById(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BillboardUpdateRequest} billboardUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBillboard(billboardUpdateRequest: BillboardUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<APIResponseBillboardDTO> {
            return localVarFp.updateBillboard(billboardUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BillboardControllerApi - object-oriented interface
 * @export
 * @class BillboardControllerApi
 * @extends {BaseAPI}
 */
export class BillboardControllerApi extends BaseAPI {
    /**
     * 
     * @param {BillboardCreateRequest} billboardCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillboardControllerApi
     */
    public createBillboard(billboardCreateRequest: BillboardCreateRequest, options?: RawAxiosRequestConfig) {
        return BillboardControllerApiFp(this.configuration).createBillboard(billboardCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillboardControllerApi
     */
    public getAllBillboards(options?: RawAxiosRequestConfig) {
        return BillboardControllerApiFp(this.configuration).getAllBillboards(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillboardControllerApi
     */
    public getBillboardById(options?: RawAxiosRequestConfig) {
        return BillboardControllerApiFp(this.configuration).getBillboardById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BillboardUpdateRequest} billboardUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillboardControllerApi
     */
    public updateBillboard(billboardUpdateRequest: BillboardUpdateRequest, options?: RawAxiosRequestConfig) {
        return BillboardControllerApiFp(this.configuration).updateBillboard(billboardUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrganizationControllerApi - axios parameter creator
 * @export
 */
export const OrganizationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateOrganizationRequest} createOrganizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: async (createOrganizationRequest: CreateOrganizationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrganizationRequest' is not null or undefined
            assertParamExists('createOrganization', 'createOrganizationRequest', createOrganizationRequest)
            const localVarPath = `/api/v1/organizations/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrganizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationControllerApi - functional programming interface
 * @export
 */
export const OrganizationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateOrganizationRequest} createOrganizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganization(createOrganizationRequest: CreateOrganizationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(createOrganizationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationControllerApi.createOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrganizationControllerApi - factory interface
 * @export
 */
export const OrganizationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateOrganizationRequest} createOrganizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization(createOrganizationRequest: CreateOrganizationRequest, options?: RawAxiosRequestConfig): AxiosPromise<APIResponseBoolean> {
            return localVarFp.createOrganization(createOrganizationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationControllerApi - object-oriented interface
 * @export
 * @class OrganizationControllerApi
 * @extends {BaseAPI}
 */
export class OrganizationControllerApi extends BaseAPI {
    /**
     * 
     * @param {CreateOrganizationRequest} createOrganizationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public createOrganization(createOrganizationRequest: CreateOrganizationRequest, options?: RawAxiosRequestConfig) {
        return OrganizationControllerApiFp(this.configuration).createOrganization(createOrganizationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserRegistrationRequest} userRegistrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (userRegistrationRequest: UserRegistrationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegistrationRequest' is not null or undefined
            assertParamExists('registerUser', 'userRegistrationRequest', userRegistrationRequest)
            const localVarPath = `/api/v1/users/user/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegistrationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserRegistrationRequest} userRegistrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(userRegistrationRequest: UserRegistrationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIResponseAuthenticationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(userRegistrationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.registerUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {UserRegistrationRequest} userRegistrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(userRegistrationRequest: UserRegistrationRequest, options?: RawAxiosRequestConfig): AxiosPromise<APIResponseAuthenticationResponse> {
            return localVarFp.registerUser(userRegistrationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @param {UserRegistrationRequest} userRegistrationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public registerUser(userRegistrationRequest: UserRegistrationRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).registerUser(userRegistrationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



